<!DOCTYPE html>
<html lang="en">
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"
	integrity="sha512-d5i7LaZXa5O4fjB5WddjWJ7+/QhQYXxMntXGyN24ez5b/ct60Bsqx/xOtq2osUqHe9QthddvD6YUi3KnLR9D8g=="
	crossorigin="anonymous" referrerpolicy="no-referrer" />
<style>
	body {
		font-family: 'Roboto', sans-serif;
		background-color: #f8f9fa;
		margin: 0;
		padding: 0;
	}

	.container {
		max-width: 1400px;
		/* Increased max-width */
		margin: 0 auto;
		padding: 20px;
	}

	.cart-section {
		padding: 50px 0;
	}

	.cart-table-wrap {
		overflow-x: auto;
	}

	.cart-table {
		width: 100%;
		border-collapse: collapse;
		margin-bottom: 20px;
		font-size: 1.1em;
		/* Increased font size */
	}

	.cart-table th,
	.cart-table td {
		padding: 20px;
		/* Increased padding */
		text-align: center;
	}

	.cart-table th {
		background-color: #007bff;
		color: white;
		text-transform: uppercase;
	}

	.cart-table td {
		background-color: #fff;
		border-bottom: 1px solid #dee2e6;
	}

	.cart-table .product-remove button {
		background: none;
		border: none;
		color: #dc3545;
		cursor: pointer;
		font-size: 20px;
	}

	.cart-table .product-image img {
		width: 120px;
		/* Increased image size */
		height: auto;
		border-radius: 5px;
	}

	.quantity-control {
		display: flex;
		align-items: center;
		justify-content: center;
	}

	.quantity-control button {
		background: none;
		border: 1px solid #ced4da;
		padding: 5px 10px;
		cursor: pointer;
		font-size: 16px;
	}

	.quantity-control span {
		padding: 0 10px;
		font-size: 16px;
	}

	.total-section {
		background-color: #fff;
		padding: 20px;
		border-radius: 5px;
		box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
	}

	.total-table {
		width: 100%;
		border-collapse: collapse;
		margin-bottom: 20px;
		font-size: 1.1em;
		/* Increased font size */
	}

	.total-table th,
	.total-table td {
		padding: 15px;
		/* Increased padding */
		text-align: left;
	}

	.total-table th {
		background-color: #007bff;
		color: white;
		text-transform: uppercase;
	}

	.total-table .total-data strong {
		font-weight: 700;
	}

	.cart-buttons {
		text-align: center;
	}

	.cart-buttons .boxed-btn {
		background-color: #007bff;
		color: white;
		padding: 15px 30px;
		/* Increased padding */
		border: none;
		border-radius: 5px;
		text-transform: uppercase;
		cursor: pointer;
		text-decoration: none;
		transition: background-color 0.3s;
	}

	.cart-buttons .boxed-btn.black {
		background-color: #343a40;
	}

	.cart-buttons .boxed-btn:hover {
		background-color: #0056b3;
	}

	.cart-buttons .boxed-btn.black:hover {
		background-color: #23272b;
	}

	.empty-cart {
		margin-top: 50px;
		text-align: center;
	}

	.empty-cart h2 {
		color: #333;
	}

	.empty-cart a {
		color: #007bff;
		text-decoration: none;
	}

	.empty-cart a:hover {
		text-decoration: underline;
	}
</style>
<%- include ('../partials/head/head.ejs' ) %>

	<body>


		<%- include('../partials/header/header.ejs') %>

			<!-- breadcrumb-section -->
			<div class="breadcrumb-section breadcrumb-bg">
				<div class="container">
					<div class="row">
						<div class="col-lg-8 offset-lg-2 text-center">
							<div class="breadcrumb-text">
								<p>Fresh and Organic</p>
								<h1>Cart</h1>
							</div>
						</div>
					</div>
				</div>
			</div>
			<!-- end breadcrumb section -->
			<% if (cart) { %>

				<!-- cart -->
				<div class="cart-section">
					<div class="container">
						<div class="row">
							<div class="col-lg-8 col-md-12">
								<div class="cart-table-wrap">
									<table class="cart-table">
										<thead class="cart-table-head">
											<tr class="table-head-row">
												<th class="product-remove"></th>
												<th class="product-image">Product Image</th>
												<th class="product-name">Name</th>
												<th class="product-price">Price</th>
												<th class="product-quantity">Quantity</th>
												<th class="product-total">Total</th>
											</tr>
										</thead>
										<tbody>
											<% for(let i=0; i < cart.items.length; i++) { %>
												<input type="text" value="<%= cart.items[i].productId.stock %>" hidden
													id="stock_<%= i %>">
												<tr class="table-body-row">
													<td class="product-remove">
														<button
															onclick="deleteCartProduct('<%= cart.items[i].productId._id %>')">
															<i class="far fa-window-close"></i>
														</button>
													</td>
													<td class="product-image">
														<img src="/<%= cart.items[i].productId.imageUrl[0] %>"
															alt="">
													</td>
													<td class="product-name">
														<%= cart.items[i].productId.name %>
													</td>
													<td class="product-price" id="price_<%= i %>">Rs <%=
															cart.items[i].productId.discount_price %>
													</td>
													<td>

														<div class="quantity-control">
															<button type="button"
																onclick="updateQuantity('<%= i %>', '<%= cart.items[i].productId._id %>', -1)">-</button>
															<span id="quantity_<%= i %>">
																<%= cart.items[i].quantity %>
															</span>
															<button type="button"
																onclick="updateQuantity('<%= i %>', '<%= cart.items[i].productId._id %>', 1)">+</button>
														</div>
													</td>
													<td class="product-total" id="productTotal_<%= i %>">
														<%= cart.items[i].quantity *
															cart.items[i].productId.discount_price %>
													</td>
												</tr>
												<% } %>
										</tbody>
									</table>
								</div>
							</div>
							<div class="col-lg-4">
								<div class="total-section">
									<table class="total-table">
										<thead class="total-table-head">
											<tr class="table-total-row">
												<th>Total</th>
												<th>Price</th>
											</tr>
										</thead>
										<tbody>
											<tr class="total-data">
												<td><strong>Subtotal: </strong></td>
												<td id="totalPrice">
													<%= cart.totalPrice %>
												</td>
											</tr>
											<tr class="total-data">
												<td><strong>Shipping: </strong></td>
												<td>
													<del>45</del><br>
													<span class="text-success fw-bold">Free Delivery</span>
												</td>
											</tr>
											<tr class="total-data">
												<td><strong>Total: </strong></td>
												<td id="overallTotal"><%= cart.totalPrice %> </td>
											</tr>
										</tbody>
									</table>
									<div class="cart-buttons">
										<a href="/checkout" class="boxed-btn black">Check Out</a>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>

				<!-- end cart -->
				<% }else{ %>

					<style>
						/* Custom CSS for styling */
						.empty-cart {
							margin-top: 50px;
							text-align: center;
						}

						.empty-cart h2 {
							color: #333;
						}

						.empty-cart a {
							color: #007bff;
							text-decoration: none;
						}

						.empty-cart a:hover {
							text-decoration: underline;
						}
					</style>
					<div class="container">
						<div class="empty-cart">
							<h2>Your cart is empty</h2>
							<p>Continue shopping <a href="/shop">here</a>.</p>
						</div>
					</div>


					<!-- end cart -->>
					<% } %>

						<%- include('../partials/footer/footer.ejs') %>

	</body>
	<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


	<script>
		async function checkSession() {
			try {
				const response = await fetch('/check-session', {
					method: 'GET',
					headers: {
						'Content-Type': 'application/json'
					}
				});
				console.log(response,'response is showing =====================pppp');
				if (response.status === 401) {
					throw new Error('User not authenticated');
				}

				const data = await response.json();
				return data.result === 'success';
			} catch (error) {
				return false;
			}
		}
		async function updateQuantity(index, productId, change) {

			const isSessionValid = await checkSession();
			console.log(isSessionValid,'session checking');

			if (!isSessionValid) {
				Swal.fire({
					title: "Invalid Entry",
					text: "Please sign in to continue.",
					icon: "warning",
					showCancelButton: true,
					confirmButtonText: "Sign In",
					cancelButtonText: "Cancel"
				}).then((result) => {
					if (result.isConfirmed) {
						window.location.href = '/signin';
					}
				});
				return;
			}


			const quantityElement = document.getElementById('quantity_' + index);
			let quantity = parseInt(quantityElement.textContent);
			const stock = parseInt(document.getElementById('stock_' + index).value);
			const price = parseFloat(document.getElementById('price_' + index).textContent.replace('Rs', '').trim());

			quantity += change;

			if (quantity <= 0 || quantity > stock || quantity > 10) {
				Swal.fire({
					position: "center",
					icon: "error",
					title: quantity <= 0 ? "Quantity must be at least 1" : "Maximum product limit is exceeded",
					showConfirmButton: false,
					timer: 1500
				});
				return
			}
			await fetch(`/add-to-cart-manage/?productId=${productId}&quantity=${quantity}`, {
				method: 'GET',
				headers: {
					'Content-Type': 'application/json'
				}
			}).then(response => response.ok ? response.json() : console.log('Some network error occurred while fetching'))
				.then(data => {
					if (data.result === 'within limit') {
						document.getElementById('totalPrice').textContent = data.totalPrice[0].totalPrice;
						document.getElementById('overallTotal').textContent = data.totalPrice[0].totalPrice;
						document.getElementById('productTotal_' + index).textContent = (quantity * price).toFixed(2);
						quantityElement.textContent = quantity;
					} else {
						Swal.fire({
							position: "center",
							icon: "error",
							title: "Maximum product limit is exceeded",
							showConfirmButton: false,
							timer: 1500
						});
					}
				})
				.catch(err => {
					console.log(err, 'Some error occurred while fetching in cart page');
				});
		}





	</script>
	<script>

		async function deleteCartProduct(productId) {
			Swal.fire({
				title: "Are you sure?",
				text: "You won't be able to revert this!",
				icon: "warning",
				showCancelButton: true,
				confirmButtonColor: "#3085d6",
				cancelButtonColor: "#d33",
				confirmButtonText: "Yes, Delete it!"
			}).then((result) => {
				if (result.isConfirmed) {
					checkingSwal(productId)
				}
			})

		}

		async function checkingSwal(productId) {
			console.log(productId);
			await fetch(`/delete-cart-product/?productId=${productId}`, {
				method: 'DELETE',
				headers: {
					'Content-Type': 'application/json'
				}
			}).then(response => response.ok ? response.json() : console.log('some network failure occured while using fetch'))
				.then(data => data.result === 'success' ?
					Swal.fire({
						title: "Deleted!",
						text: "Product has been deleted successfully.",
						icon: "success"
					}) : 'some error occured').then(() => {
						location.reload()
					}).catch(err => console.log('some error occured while try to delte using fetch', err))
		}
	</script>

</html>